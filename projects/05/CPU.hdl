// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
// define true
   Zero(in=inM[0], out=false);
   Not(in=false, out=true);
   
// Starting with the decoder - aLoad in MSB is 0
   Nor(a=instruction[15], b=false, out=instLoad);
   
// Otherwise translate other instruction bits
   And(a=instruction[15], b=instruction[12], out=mux2Sel);
   And(a=instruction[15], b=instruction[11], out=zx);
   And(a=instruction[15], b=instruction[10], out=nx);
   And(a=instruction[15], b=instruction[9], out=zy);
   And(a=instruction[15], b=instruction[8], out=ny);
   And(a=instruction[15], b=instruction[7], out=f);
   And(a=instruction[15], b=instruction[6], out=no);
   And(a=instruction[15], b=instruction[5], out=aluALoad);
   And(a=instruction[15], b=instruction[4], out=aluDLoad);
   And(a=instruction[15], b=instruction[3], out=aluMLoad);
   And(a=instruction[15], b=instruction[2], out=j1);
   And(a=instruction[15], b=instruction[1], out=j2);
   And(a=instruction[15], b=instruction[0], out=j3);
   	
// Mux1
   Mux16(a=aluOut, b=instruction, sel=instLoad, out=aIn);
   
// A register
   Or(a=instLoad, b=aluALoad, out=aLoad);
   ARegister(in=aIn, load=aLoad, out=aOut);
   
// Mux2
   Mux16(a=aOut, b=inM, sel= mux2Sel, out=aOrmOut);
   
// ALU
   ALU(y=aOrmOut, x=dOut, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluOut, zr=zr, ng=ng);	
   
// D register
   DRegister(in=aluOut, load=aluDLoad, out=dOut);
   
// Jump logic
   Not(in=ng, out=notNg);
   Not(in=zr, out=notZr);
   And(a=notNg, b=notZr, out=pos);
   And(a=j1, b=ng, out=jmp1);
   And(a=j2, b=zr, out=jmp2);
   And(a=j3, b=pos, out=jmp3);
   Or(a=jmp1, b=jmp2, out=jmp4);
   Or(a=jmp3, b=jmp4, out=loadJMP);

// outM = aluOut
   Clone16(in=aluOut, out=outM);
// addressM = aOut
   Strip15(in=aOut, out=addressM);
// writeM = aluMLoad
   Clone(in=aluMLoad, out=writeM);
// Finally, the PC
   PC(in=aOut, load=loadJMP, inc=true, reset=reset, out=pcPlus);
   Strip15(in=pcPlus, out=pc);
}